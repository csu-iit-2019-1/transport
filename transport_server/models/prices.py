# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from transport_server.models.base_model_ import Model
from transport_server import util


class Prices(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, transport_id: int=None, _date: int=None, coach_price: float=None, comfort_price: float=None, business_price: float=None, first_class_price: float=None):  # noqa: E501
        """Prices - a model defined in Swagger

        :param transport_id: The transport_id of this Prices.  # noqa: E501
        :type transport_id: int
        :param _date: The _date of this Prices.  # noqa: E501
        :type _date: int
        :param coach_price: The coach_price of this Prices.  # noqa: E501
        :type coach_price: float
        :param comfort_price: The comfort_price of this Prices.  # noqa: E501
        :type comfort_price: float
        :param business_price: The business_price of this Prices.  # noqa: E501
        :type business_price: float
        :param first_class_price: The first_class_price of this Prices.  # noqa: E501
        :type first_class_price: float
        """
        self.swagger_types = {
            'transport_id': int,
            '_date': int,
            'coach_price': float,
            'comfort_price': float,
            'business_price': float,
            'first_class_price': float
        }

        self.attribute_map = {
            'transport_id': 'transportId',
            '_date': 'date',
            'coach_price': 'coachPrice',
            'comfort_price': 'comfortPrice',
            'business_price': 'businessPrice',
            'first_class_price': 'firstClassPrice'
        }

        self._transport_id = transport_id
        self.__date = _date
        self._coach_price = coach_price
        self._comfort_price = comfort_price
        self._business_price = business_price
        self._first_class_price = first_class_price

    @classmethod
    def from_dict(cls, dikt) -> 'Prices':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Prices of this Prices.  # noqa: E501
        :rtype: Prices
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transport_id(self) -> int:
        """Gets the transport_id of this Prices.


        :return: The transport_id of this Prices.
        :rtype: int
        """
        return self._transport_id

    @transport_id.setter
    def transport_id(self, transport_id: int):
        """Sets the transport_id of this Prices.


        :param transport_id: The transport_id of this Prices.
        :type transport_id: int
        """

        self._transport_id = transport_id

    @property
    def _date(self) -> int:
        """Gets the _date of this Prices.


        :return: The _date of this Prices.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date: int):
        """Sets the _date of this Prices.


        :param _date: The _date of this Prices.
        :type _date: int
        """

        self.__date = _date

    @property
    def coach_price(self) -> float:
        """Gets the coach_price of this Prices.


        :return: The coach_price of this Prices.
        :rtype: float
        """
        return self._coach_price

    @coach_price.setter
    def coach_price(self, coach_price: float):
        """Sets the coach_price of this Prices.


        :param coach_price: The coach_price of this Prices.
        :type coach_price: float
        """

        self._coach_price = coach_price

    @property
    def comfort_price(self) -> float:
        """Gets the comfort_price of this Prices.


        :return: The comfort_price of this Prices.
        :rtype: float
        """
        return self._comfort_price

    @comfort_price.setter
    def comfort_price(self, comfort_price: float):
        """Sets the comfort_price of this Prices.


        :param comfort_price: The comfort_price of this Prices.
        :type comfort_price: float
        """

        self._comfort_price = comfort_price

    @property
    def business_price(self) -> float:
        """Gets the business_price of this Prices.


        :return: The business_price of this Prices.
        :rtype: float
        """
        return self._business_price

    @business_price.setter
    def business_price(self, business_price: float):
        """Sets the business_price of this Prices.


        :param business_price: The business_price of this Prices.
        :type business_price: float
        """

        self._business_price = business_price

    @property
    def first_class_price(self) -> float:
        """Gets the first_class_price of this Prices.


        :return: The first_class_price of this Prices.
        :rtype: float
        """
        return self._first_class_price

    @first_class_price.setter
    def first_class_price(self, first_class_price: float):
        """Sets the first_class_price of this Prices.


        :param first_class_price: The first_class_price of this Prices.
        :type first_class_price: float
        """

        self._first_class_price = first_class_price

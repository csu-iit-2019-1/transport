# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from transport_server.models.base_model_ import Model
from transport_server import util


class Prices(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    # def __init__(self, transport_id: int=None, _date: int=None, coach_price: float=None, comfort_price: float=None, business_price: float=None, first_class_price: float=None):  # noqa: E501
    def __init__(self, transport_type: str=None, _date: int=None, avg_price: float=None, min_price: float=None):  # noqa: E501
        """Prices - a model defined in Swagger

        :param transport_type: The transport_type of this Prices.  # noqa: E501
        :type transport_type: str
        :param _date: The _date of this Prices.  # noqa: E501
        :type _date: int
        :param avg_price: The avg_price of this Prices.  # noqa: E501
        :type avg_price: float
        :param min_price: The min_price of this Prices.  # noqa: E501
        :type min_price: float
        """
        self.types = {
            'transport_type': str,
            '_date': int,
            'avg_price': float,
            'min_price': float
        }

        self.attribute_map = {
            'transport_type': 'transportType',
            '_date': 'date',
            'avg_price': 'avgPrice',
            'min_price': 'minPrice'
        }

        self._transport_type = transport_type
        self.__date = _date
        self._avg_price = avg_price
        self._min_price = min_price

    @classmethod
    def from_dict(cls, dikt) -> 'Prices':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Prices of this Prices.  # noqa: E501
        :rtype: Prices
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transport_type(self) -> str:
        """Gets the transport_type of this Prices.


        :return: The transport_type of this Prices.
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type: str):
        """Sets the transport_type of this Prices.


        :param transport_type: The transport_type of this Prices.
        :type transport_type: str
        """
        allowed_values = ["aircraft", "bus", "train"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                    .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type

    @property
    def _date(self) -> int:
        """Gets the _date of this Prices.


        :return: The _date of this Prices.
        :rtype: int
        """
        return self.__date

    @_date.setter
    def _date(self, _date: int):
        """Sets the _date of this Prices.


        :param _date: The _date of this Prices.
        :type _date: int
        """

        self.__date = _date

    @property
    def avg_price(self) -> float:
        """Gets the avg_price of this Prices.


        :return: The avg_price of this Prices.
        :rtype: float
        """
        return self._avg_price

    @avg_price.setter
    def avg_price(self, avg_price: float):
        """Sets the avg_price of this Prices.


        :param avg_price: The avg_price of this Prices.
        :type avg_price: float
        """

        self._avg_price = avg_price

    @property
    def min_price(self) -> float:
        """Gets the min_price of this Prices.


        :return: The min_price of this Prices.
        :rtype: float
        """
        return self._min_price

    @min_price.setter
    def min_price(self, min_price: float):
        """Sets the min_price of this Prices.


        :param min_price: The min_price of this Prices.
        :type min_price: float
        """

        self._min_price = min_price

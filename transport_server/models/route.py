# coding: utf-8

from __future__ import absolute_import

from typing import List

from transport_server.models.base_model_ import Model
from transport_server.models.sit import Sit  # noqa: F401,E501
from transport_server import util


class Route(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, transport_id: int=None, transport_type: str=None, name: str=None, sits: List[Sit]=None, start_point: int=None, end_point: int=None, departure_time: int=None, arrive_time: int=None, price: float=None):  # noqa: E501
        """Route - a model defined in Swagger

        :param transport_id: The transport_id of this Route.  # noqa: E501
        :type transport_id: int
        :param transport_type: The transport_type of this Route.  # noqa: E501
        :type transport_type: str
        :param name: The name of this Route.  # noqa: E501
        :type name: str
        :param sits: The sits of this Route.  # noqa: E501
        :type sits: List[Sit]
        :param start_point: The start_point of this Route.  # noqa: E501
        :type start_point: int
        :param end_point: The end_point of this Route.  # noqa: E501
        :type end_point: int
        :param departure_time: The departure_time of this Route.  # noqa: E501
        :type departure_time: object
        :param arrive_time: The arrive_time of this Route.  # noqa: E501
        :type arrive_time: object
        :param price: The price of this Route.  # noqa: E501
        :type price: float
        """
        self.types = {
            'transport_id': int,
            'transport_type': str,
            'name': str,
            'sits': List[Sit],
            'start_point': int,
            'end_point': int,
            'departure_time': int,
            'arrive_time': int,
            'price': float
        }

        self.attribute_map = {
            'transport_id': 'transportId',
            'transport_type': 'transportType',
            'name': 'name',
            'sits': 'sits',
            'start_point': 'startPoint',
            'end_point': 'endPoint',
            'departure_time': 'departureTime',
            'arrive_time': 'arriveTime',
            'price': 'price'
        }

        self._transport_id = transport_id
        self._transport_type = transport_type
        self._name = name
        self._sits = sits
        self._start_point = start_point
        self._end_point = end_point
        self._departure_time = departure_time
        self._arrive_time = arrive_time
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'Route':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Flight of this Flight.  # noqa: E501
        :rtype: Route
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transport_id(self) -> int:
        """Gets the transport_id of this Flight.


        :return: The transport_id of this Flight.
        :rtype: int
        """
        return self._transport_id

    @transport_id.setter
    def transport_id(self, transport_id: int):
        """Sets the transport_id of this Flight.


        :param transport_id: The transport_id of this Flight.
        :type transport_id: int
        """

        self._transport_id = transport_id

    @property
    def transport_type(self) -> str:
        """Gets the transport_type of this Route.


        :return: The transport_type of this Route.
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type: str):
        """Sets the transport_type of this Route.


        :param transport_type: The transport_type of this Route.
        :type transport_type: str
        """
        allowed_values = ["aircraft", "train", "bus"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"
                    .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type

    @property
    def name(self) -> str:
        """Gets the name of this Flight.


        :return: The name of this Flight.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Flight.


        :param name: The name of this Flight.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def sits(self) -> List[Sit]:
        """Gets the sits of this Flight.


        :return: The sits of this Flight.
        :rtype: List[Sit]
        """
        return self._sits

    @sits.setter
    def sits(self, sits: List[Sit]):
        """Sets the sits of this Flight.


        :param sits: The sits of this Flight.
        :type sits: List[Sit]
        """

        self._sits = sits

    @property
    def start_point(self) -> int:
        """Gets the start_point of this Flight.


        :return: The start_point of this Flight.
        :rtype: int
        """
        return self._start_point

    @start_point.setter
    def start_point(self, start_point: int):
        """Sets the start_point of this Flight.


        :param start_point: The start_point of this Flight.
        :type start_point: int
        """

        self._start_point = start_point

    @property
    def end_point(self) -> int:
        """Gets the end_point of this Flight.


        :return: The end_point of this Flight.
        :rtype: int
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point: int):
        """Sets the end_point of this Flight.


        :param end_point: The end_point of this Flight.
        :type end_point: int
        """

        self._end_point = end_point

    @property
    def departure_time(self) -> int:
        """Gets the departure_time of this Flight.


        :return: The departure_time of this Flight.
        :rtype: int
        """
        return self._departure_time

    @departure_time.setter
    def departure_time(self, departure_time: int):
        """Sets the departure_time of this Flight.


        :param departure_time: The departure_time of this Flight.
        :type departure_time: int
        """

        self._departure_time = departure_time

    @property
    def arrive_time(self) -> int:
        """Gets the arrive_time of this Flight.


        :return: The arrive_time of this Flight.
        :rtype: int
        """
        return self._arrive_time

    @arrive_time.setter
    def arrive_time(self, arrive_time: int):
        """Sets the arrive_time of this Flight.


        :param arrive_time: The arrive_time of this Flight.
        :type arrive_time: int
        """

        self._arrive_time = arrive_time

    @property
    def price(self) -> float:
        """Gets the price of this Route.


        :return: The price of this Route.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this Route.


        :param price: The price of this Route.
        :type price: float
        """

        self._price = price
